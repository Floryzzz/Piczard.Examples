' -------------------------------------------------------
' Piczard Examples | ExampleSet -A- VB.NET
' Copyright 2011-2012 Sergio Turolla - All Rights Reserved.
' Author: Sergio Turolla
' <codecarvings.com>
'  
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF 
' ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED 
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
' PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT 
' SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
' ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN 
' ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE 
' OR OTHER DEALINGS IN THE SOFTWARE.
' -------------------------------------------------------

Imports Microsoft.VisualBasic
Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.Drawing.Drawing2D
Imports System.Drawing.Text

Imports CodeCarvings.Piczard
Imports CodeCarvings.Piczard.Processing
Imports CodeCarvings.Piczard.Helpers

' Custom ImageProcessingFilter (Used by Example A.401)
' NOTE: This filter does not implement JSON serialziation
' (Please see the the "MyRotationFilter" class for a JSON serialization example)
<Serializable()> Public Class MyCustomFilter1
    Inherits ImageProcessingFilter

#Region "Constructors"
    Public Sub New()
        MyBase.New()
    End Sub
#End Region

#Region "Overriedes"

    Protected Overrides Sub Apply(ByVal args As CodeCarvings.Piczard.Processing.ImageProcessingActionExecuteArgs)
        Dim result As Bitmap = Nothing
        Try
            ' Create the result image
            result = New Bitmap(350, 350, CodeCarvings.Piczard.CommonData.DefaultPixelFormat)

            ' Set the right image resolution (DPI)
            ImageHelper.SetImageResolution(result, args.ImageProcessingJob.OutputResolution)

            Using g As Graphics = Graphics.FromImage(result)
                ' Use the max quality
                ImageHelper.SetGraphicsMaxQuality(g)

                If ((args.IsLastAction) And (Not args.AppliedImageBackColorValue.HasValue)) Then
                    ' Optimization (not mandatory)
                    ' This is the last filter action and the ImageBackColor has not been yet applied...
                    ' Apply the ImageBackColor now to save RAM & CPU
                    args.ApplyImageBackColor(g)
                End If

                Using imageAttributes As ImageAttributes = New ImageAttributes()
                    ' Important
                    imageAttributes.SetWrapMode(WrapMode.TileFlipXY)

                    ' Draw the scaled image
                    Dim destinationRectangle As Rectangle = New Rectangle(75, 52, 200, 200)

                    Using resizedImage As Image = New FixedCropConstraint(GfxUnit.Pixel, destinationRectangle.Size).GetProcessedImage(args.Image)
                        g.DrawImage(resizedImage, destinationRectangle, 0, 0, resizedImage.Width, resizedImage.Height, GraphicsUnit.Pixel, imageAttributes)

                        ' Draw the reflection
                        destinationRectangle = New Rectangle(75, 252, 200, 98)
                        Using flippedImage As Image = ImageTransformation.FlipVertical.GetProcessedImage(resizedImage)
                            g.DrawImage(flippedImage, destinationRectangle, 0, 0, flippedImage.Width, flippedImage.Height, GraphicsUnit.Pixel, imageAttributes)
                        End Using

                    End Using

                    ' Draw the mask
                    destinationRectangle = New Rectangle(0, 0, result.Width, result.Height)
                    Using loadedImage As LoadedImage = ImageArchiver.LoadImage("~/repository/filters/MyCustomFilter1Mask.png")
                        g.DrawImage(loadedImage.Image, destinationRectangle, 0, 0, loadedImage.Size.Width, loadedImage.Size.Height, GraphicsUnit.Pixel, imageAttributes)
                    End Using
                End Using

                ' Draw the text
                Dim text As String = "Generated by 'MyCustomFilter1' on " + DateTime.Now.ToString()
                Dim fontDefinition As FontDefinition = New FontDefinition()
                fontDefinition.Size = 12 '12px
                Using font As Font = fontDefinition.GetFont()
                    ' Setup the custom parameters
                    g.TextRenderingHint = TextRenderingHint.AntiAliasGridFit

                    Using stringFormat As StringFormat = New StringFormat()
                        Dim textSize As SizeF = g.MeasureString(text, font, Integer.MaxValue, stringFormat)
                        Dim pixelTextSize As Size = New Size(Convert.ToInt32(Math.Round(textSize.Width)), Convert.ToInt32(Math.Round(textSize.Height)))

                        ' Calculate the text position
                        Dim location As Point = New Point((result.Width - pixelTextSize.Width) / 2, result.Height - 14 - pixelTextSize.Height)

                        ' Draw the text
                        Using brush As Brush = New SolidBrush(ColorTranslator.FromHtml("#5b615d"))
                            g.DrawString(text, font, brush, location, stringFormat)
                        End Using
                    End Using
                End Using
            End Using

            ' Return the image
            args.Image = result
        Catch
            ' An error has occurred...

            ' Release the resources
            If (result IsNot Nothing) Then
                result.Dispose()
                result = Nothing
            End If

            ' Re-throw the exception
            Throw
        End Try
    End Sub

#End Region

End Class
